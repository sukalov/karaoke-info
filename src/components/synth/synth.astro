---
import SynthBase from "./synth-base.astro";
import SynthKeyboard from "./synth-keyboard.astro";
import SynthScreen from "./synth-screen.astro";
---

<script>
  import { Howler } from "howler";
  import { sounds } from "./sounds.ts";
  import { unmute } from "./unmute";

  Howler.autoUnlock = false;
  Howler.volume(0.5);

  type WhiteKey =
    | "C3"
    | "D3"
    | "E3"
    | "F3"
    | "G3"
    | "A3"
    | "B3"
    | "C4"
    | "D4"
    | "E4";

  type BlackKey =
    | "Csharp3"
    | "Dsharp3"
    | "Fsharp3"
    | "Gsharp3"
    | "Asharp3"
    | "Csharp4"
    | "Dsharp4";

  export type NoteName = WhiteKey | BlackKey;

  const isTouchDevice = window.matchMedia("(pointer: coarse)").matches;
  const numInstruments = 0;

  let timeout: NodeJS.Timeout | undefined;

  function loadSynth() {
    const synth: HTMLElement | null | undefined =
      document.getElementById("synth");
    const keys: NodeListOf<SVGGElement> | undefined =
      synth?.querySelectorAll(".synth-key");
    const instrumentIconWrapper: SVGGElement | null | undefined =
      synth?.querySelector(".synth-instrument");
    const keyLetters: NodeListOf<SVGElement> | undefined =
      synth?.querySelectorAll(".key-letter");

    // State -------------------------------------------------------//
    let activeInstrument = 0;
    let isMouseDown = false;
    // let isTouching = false;

    const enableSynth = () => {
      clearTimeout(timeout);

      if (synth && synth.dataset.enabled !== "true") {
        synth.dataset.enabled = "true";
        loadInstrumentSounds();
        revealKeyboardLetters();
      }
    };

    const loadInstrumentSounds = () => {
      for (const [_key, value] of Object.entries(sounds.instruments)) {
        value.howl.load();
      }
    };

    // Keyboard ----------------------------------------------------//
    const revealKeyboardLetters = () => {
      if (!isTouchDevice) {
        keyLetters?.forEach((letter, i) => {
          setTimeout(() => {
            letter.classList.add("visible");
          }, i * 30);
        });
      }
    };

    const hideKeyboardLetters = () => {
      keyLetters?.forEach((letter) => {
        letter.classList.add("fadeout");
        setTimeout(function () {
          letter.classList.remove("visible");
        }, 2000);
      });
    };

    const pressKey = (noteName: NoteName) => {
      const keyId = document.getElementById(noteName);
      if (!keyId?.classList.contains("pressed")) {
        keyId?.classList.add("pressed");
        playNote(noteName);
      }
    };

    // const pressKeyMatchingCoords = (x, y) => {
    //   keys?.forEach((key) => {
    //     let posXStart = key.offset().left;
    //     let posYStart = key.offset().top - window.scrollTop();
    //     let posXEnd = key.offset().left + key[0].getBoundingClientRect().width;
    //     let posYEnd = key.offset().top + key[0].getBoundingClientRect().height;

    //     if (x >= posXStart && x <= posXEnd && y >= posYStart && y <= posYEnd) {
    //       releaseAllKeys();
    //       let noteName = key[0].id;
    //       playNote(noteName);
    //       key.classList.add("pressed");
    //     }
    //   });
    // }

    const releaseKey = (noteName: NoteName) => {
      document.getElementById(noteName)?.classList.remove("pressed");
    };

    const releaseAllKeys = () => {
      keys?.forEach((key) => {
        key.classList.remove("pressed");
      });
    };

    const playNote = (noteName: NoteName) => {
      sounds.instruments[activeInstrument].howl.play(noteName);
    };

    // Event Binding ---------------------------------------------//

    const handleClickInstrument = (e: MouseEvent) => {
      e.preventDefault();
    };

    const handleMouseDown = function (this: SVGElement, e: MouseEvent) {
      e.preventDefault();
      hideKeyboardLetters();
      isMouseDown = true;
      pressKey(this.id as NoteName);
    };

    const handleMouseEnter = function (this: SVGElement, e: MouseEvent) {
      e.preventDefault();
      if (isMouseDown) {
        pressKey(this.id as NoteName);
      }
    };

    const handleMouseOut = function (this: SVGElement, e: MouseEvent) {
      e.preventDefault();
      releaseKey(this.id as NoteName);
    };

    const handleTouchStart = function (this: SVGElement, e: TouchEvent) {
      e.preventDefault();
      hideKeyboardLetters();
      // isTouching = true;
      pressKey(this.id as NoteName);
    };

    // const handleTouchEnter = function (this: SVGElement, e: TouchEvent) {
    //   e.preventDefault();
    //   if (isTouching) {
    //     pressKey(this.id as NoteName);
    //   }
    // };

    // const handleTouchMove = (e: TouchEvent) => {
    // TODO: Fix
    // let touch = e.originalEvent.touches[0];
    // pressKeyMatchingCoords(touch.clientX, touch.clientY);
    // };

    const handleMouseUp = () => {
      isMouseDown = false;
      releaseAllKeys();
    };

    const handleTouchEnd = () => {
      // isTouching = false;
      releaseAllKeys();
    };

    const handleKeyDown = (e: KeyboardEvent) => {
      if (synth?.dataset.loading === "false") {
        hideKeyboardLetters();
        switch (e.key) {
          case "a":
          case "ф":
          case "Ф":
          case "A":
            e.preventDefault();
            pressKey("C3");
            break;
          case "w":
          case "ц":
          case "Ц":
          case "W":
            e.preventDefault();
            pressKey("Csharp3");
            break;
          case "s":
          case "ы":
          case "Ы":
          case "S":
            e.preventDefault();
            pressKey("D3");
            break;
          case "e":
          case "у":
          case "У":
          case "E":
            e.preventDefault();
            pressKey("Dsharp3");
            break;
          case "d":
          case "в":
          case "В":
          case "D":
            e.preventDefault();
            pressKey("E3");
            break;
          case "f":
          case "а":
          case "А":
          case "F":
            e.preventDefault();
            pressKey("F3");
            break;
          case "t":
          case "е":
          case "Е":
          case "T":
            e.preventDefault();
            pressKey("Fsharp3");
            break;
          case "g":
          case "п":
          case "П":
          case "G":
            e.preventDefault();
            pressKey("G3");
            break;
          case "y":
          case "н":
          case "Н":
          case "Y":
            e.preventDefault();
            pressKey("Gsharp3");
            break;
          case "h":
          case "H":
          case "р":
          case "Р":
            e.preventDefault();
            pressKey("A3");
            break;
          case "u":
          case "г":
          case "Г":
          case "U":
            e.preventDefault();
            pressKey("Asharp3");
            break;
          case "j":
          case "о":
          case "О":
          case "J":
            e.preventDefault();
            pressKey("B3");
            break;
          case "k":
          case "л":
          case "Л":
          case "K":
            e.preventDefault();
            pressKey("C4");
            break;
          case "o":
          case "щ":
          case "Щ":
          case "O":
            e.preventDefault();
            pressKey("Csharp4");
            break;
          case "l":
          case "д":
          case "Д":
          case "L":
            e.preventDefault();
            pressKey("D4");
            break;
          case "p":
          case "з":
          case "З":
          case "P":
            e.preventDefault();
            pressKey("Dsharp4");
            break;
          case ";":
          case "ж":
          case "Ж":
          case ":":
            e.preventDefault();
            pressKey("E4");
            break;
          default:
            break;
        }
      }
    };

    const handleKeyUp = (e: KeyboardEvent) => {
      if (synth && synth.dataset.loading === "false") {
        switch (e.key) {
          case "a":
          case "ф":
          case "Ф":
          case "A":
            releaseKey("C3");
            break;
          case "w":
          case "ц":
          case "Ц":
          case "W":
            releaseKey("Csharp3");
            break;
          case "s":
          case "ы":
          case "Ы":
          case "S":
            releaseKey("D3");
            break;
          case "e":
          case "у":
          case "У":
          case "E":
            releaseKey("Dsharp3");
            break;
          case "d":
          case "в":
          case "В":
          case "D":
            releaseKey("E3");
            break;
          case "f":
          case "а":
          case "А":
          case "F":
            releaseKey("F3");
            break;
          case "t":
          case "е":
          case "Е":
          case "T":
            releaseKey("Fsharp3");
            break;
          case "g":
          case "п":
          case "П":
          case "G":
            releaseKey("G3");
            break;
          case "y":
          case "н":
          case "Н":
          case "Y":
            releaseKey("Gsharp3");
            break;
          case "h":
          case "р":
          case "":
          case "H":
            releaseKey("A3");
            break;
          case "u":
          case "г":
          case "Г":
          case "U":
            releaseKey("Asharp3");
            break;
          case "j":
          case "о":
          case "О":
          case "J":
            releaseKey("B3");
            break;
          case "k":
          case "л":
          case "Л":
          case "K":
            releaseKey("C4");
            break;
          case "o":
          case "щ":
          case "Щ":
          case "O":
            releaseKey("Csharp4");
            break;
          case "l":
          case "д":
          case "Д":
          case "L":
            releaseKey("D4");
            break;
          case "p":
          case "з":
          case "З":
          case "P":
            releaseKey("Dsharp4");
            break;
          case ";":
          case "ж":
          case "Ж":
          case ":":
            releaseKey("E4");
            break;
          default:
            break;
        }
      }
    };

    const bindEvents = () => {
      synth?.addEventListener("mouseup", handleMouseUp);
      synth?.addEventListener("touchend", handleTouchEnd);
      keys?.forEach((key) => {
        key.addEventListener("mousedown", handleMouseDown);
        key.addEventListener("mouseenter", handleMouseEnter);
        key.addEventListener("mouseout", handleMouseOut);
        key.addEventListener("touchstart", handleTouchStart);
      });
      instrumentIconWrapper?.addEventListener("click", handleClickInstrument);
      document.addEventListener("keydown", handleKeyDown);
      document.addEventListener("keyup", handleKeyUp);
    };

    function startSynth() {
      enableSynth();
      bindEvents();

      const audioContext = window.AudioContext
        ? new window.AudioContext()
        : null;
      unmute(audioContext, false, false);
    }

    startSynth();
  }

  document.addEventListener("astro:page-load", loadSynth);

  function unloadSynth() {
    const unloadSounds = () => {
      for (const [_key, value] of Object.entries(sounds.instruments)) {
        value.howl.unload();
      }
    };

    clearTimeout(timeout);
    unloadSounds();
  }

  document.addEventListener("beforeunload", unloadSynth);
</script>

<div class="justify-center flex  items-center px-2 pt-8">
  <div
    id="synth"
    class="synth w-full max-w-screen-md"
    tabindex="0"
    data-enabled="false"
    data-loading="false"
  >
    <svg
      width="100%"
      viewBox="0 0 250 114"
      version="1.1"
      xmlns="http://www.w3.org/2000/svg"
    >
      <SynthBase />
      <SynthKeyboard />
      <SynthScreen />
    </svg>
  </div>
</div>

<style lang="scss">
  .synth-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .synth {
    &[data-loading="true"] {
      pointer-events: none;
      cursor: default;
    }

    &:focus,
    &:focus-within {
      outline: none;
    }

    svg {
      overflow: scroll;
    }
  }
</style>
